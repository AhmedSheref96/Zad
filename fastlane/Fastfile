default_platform(:android)

require 'dotenv'

platform :android do

  lane :setup_google_secrets do
    require 'base64'

    json_data = ENV['GOOGLE_SERVICE_SECRETS']
    if json_data.nil? || json_data.empty?
      UI.user_error!("Missing GOOGLE_SERVICE_SECRETS environment variable")
    end

    File.open("fastlane/google-service-secrets.json", "w") do |file|
      file.write(json_data)
    end
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  def get_branch_name
    branch_name = ENV['GIT_BRANCH']
  end

  def update_version_in_gradle(file_path, version_name, version_code)
    unless File.exist?(file_path)
      UI.user_error!("Gradle file not found at #{file_path}. Please check the path.")
    end

    content = File.read(file_path)

    content.gsub!(/versionName\s*=\s*"[^\"]+"/, "versionName = \"#{version_name}\"")
    content.gsub!(/versionCode\s*=\s*\d+/, "versionCode = #{version_code}")
    File.write(file_path, content)
    UI.message("content = #{content}")
  end

  def push_app_gradle_changes(file_path)
    branch_name = get_branch_name()
    sh("git checkout #{branch_name}")

    UI.message("origin = #{ENV['ORIGIN']}")

    sh("git add -u #{file_path}")
    sh('git commit -m "Update versionCode and versionName"')
    sh("git push #{ENV['ORIGIN']} #{branch_name}")

    UI.message("Successfully committed and pushed version updates.")
  end

  # Function to fetch the last tag for a branch, or fallback to the development branch
  def get_last_tag(branch_name)
    tag = `git describe --tags $(git rev-list --tags --max-count=1 --branches=#{branch_name}) 2>/dev/null`.strip
    if tag.nil? || tag.empty?
      tag = `git describe --tags $(git rev-list --tags --max-count=1 --branches=development) 2>/dev/null`.strip
    end
    tag.empty? ? 'v1.0.0' : tag
  end

  # Function to parse the version tag into components
  def parse_version(tag)
    version_parts = tag.gsub('v', '').split('.')
    major = version_parts[0].to_i
    minor = version_parts[1].to_i
    patch = version_parts[2].to_i
    { major: major, minor: minor, patch: patch }
  end

  # Function to determine the next version based on branch and commit count
  def determine_next_version(branch_name, version)
    UI.message("current branch  = #{branch_name}")
    major = version[:major]
    minor = version[:minor]
    patch = version[:patch]

    if branch_name.start_with?('feat')
      commit_count = `git rev-list #{branch_name} --count`.strip.to_i
      if commit_count == 1
        minor += 1
        patch = 0
      else
        patch += 1
      end
    else
      patch += 1
    end

    "v#{major}.#{minor}.#{patch}"
  end


  # Fastlane lane
  lane :tag_commit_if_needed do
    # Step 1: Get the latest commit message
    commit_message = sh("git log -1 --pretty=%B").strip

    # Check if the commit message contains "fixed", "solved", or "finished"
    if commit_message =~ /fixed|solved|finished/i
      # Step 2: Fetch branch and tag info
      branch_name = get_branch_name()
      last_tag = get_last_tag(branch_name)
      version = parse_version(last_tag)
      UI.message("current branch  = #{branch_name}")
      new_tag = determine_next_version(branch_name, version)
      new_version_code = new_tag.gsub('v', '').gsub('.', '')

      # Step 3: Update version in Gradle
      gradle_file = "../app/build.gradle.kts" # Adjust this path as needed
      update_version_in_gradle(gradle_file, new_tag, new_version_code)
      push_app_gradle_changes(gradle_file)

      # Step 4: Tag and push the commit
      sh("git checkout #{branch_name}")

      sh("git tag #{new_tag}")
      UI.message("Tagging commit with tag: #{new_tag}")

      sh("git push #{ENV['ORIGIN']} #{branch_name} #{new_tag}")

      UI.message("Pushed commit and tag #{new_tag} to remote repository.")
    else
      UI.message("No relevant commit message found. Skipping tag creation.")
    end
  end


  desc "Test update version"
  lane :test_update_version do|options|
    gradle_file = options[:gradle_file] || "./app/build.gradle.kts"
    version_name = options[:version_name] || "1.0.0"
    version_code = options[:version_code] || "1"
    update_version_in_gradle(gradle_file, version_name, version_code)
  end

  desc "distribute to app distribution"
  lane :distribute do
    gradle(
      task: "assembleRelease"
    )
    release_notes = get_commits_from_last_tag
    release = firebase_app_distribution(
      app: ENV['APP_ID'],
      service_credentials_file: ENV['FIREBASE_CONDITIONALS_JSON'],
      release_notes: release_notes,
      groups: "operations-team,qa-team",
      debug: false
    )
  end

  lane :get_commits_from_last_tag do
    # Step 1: Get the last tag
    last_tag = sh("git rev-list --tags --max-count=1 | xargs -I {} git describe --tags {} || echo ''").strip

    if last_tag.nil? || last_tag.empty?
      UI.message("No tags found in the repository! Fetching all commits in the branch starting with 'BR-'.")

      # Step 2 (Fallback): Get all commits in the branch that start with 'BR-'
      commit_messages = sh("git log --pretty=format:'%s' --grep='^BR-' || echo ''").strip
    else
      UI.message("Last tag found: #{last_tag}")

      # Step 3: Get commits from the last tag to HEAD that start with 'BR-'
      commit_messages = sh("git log #{last_tag}..HEAD --pretty=format:'%s' --grep='^BR-' || echo ''").strip
    end

    if commit_messages.empty?
      UI.message("No commits starting with 'BR-' found.")
    else
      UI.message("Commits found starting with 'BR-':")
      UI.message(commit_messages)
    end

    # Implicitly return commit_messages
    commit_messages
  end


end
